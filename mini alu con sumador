module full_adder(
    input A, B, Cin,
    output S, Cout
);
    wire w1, w2, w3;
    xor (w1, A, B);
    xor (S, w1, Cin);
    and (w2, A, B);
    and (w3, w1, Cin);
    or  (Cout, w2, w3);
endmodule

// ---------------------------
// Sumador de 8 bits
// ---------------------------
module adder8(
    input [7:0] A, B,
    input Cin,
    output [7:0] SUM,
    output Cout
);
    wire [6:0] carry;
    
    full_adder FA0(A[0], B[0], Cin, SUM[0], carry[0]);
    full_adder FA1(A[1], B[1], carry[0], SUM[1], carry[1]);
    full_adder FA2(A[2], B[2], carry[1], SUM[2], carry[2]);
    full_adder FA3(A[3], B[3], carry[2], SUM[3], carry[3]);
    full_adder FA4(A[4], B[4], carry[3], SUM[4], carry[4]);
    full_adder FA5(A[5], B[5], carry[4], SUM[5], carry[5]);
    full_adder FA6(A[6], B[6], carry[5], SUM[6], carry[6]);
    full_adder FA7(A[7], B[7], carry[6], SUM[7], Cout);
endmodule

// ---------------------------
// ALU con suma, resta, AND
// SEL=00 -> suma
// SEL=01 -> resta
// SEL=10 -> A & B
// ---------------------------
module ALU_8bit(
    input  [7:0] A, B,
    input  [1:0] SEL,       // selector de operación
    output [7:0] RESULT,    // LEDs
    output [3:0] FLAGS      // {Z, N, C, P}
);
    wire [7:0] B_mux;
    wire [7:0] sum;
    wire carry;

    // Para resta (SEL=01), usamos ~B y Cin=1
    assign B_mux = (SEL == 2'b01) ? ~B : B;
    wire Cin = (SEL == 2'b01) ? 1'b1 : 1'b0;

    // Suma o resta
    wire [7:0] add_res;
    wire add_carry;
    adder8 SUMADOR(A, B_mux, Cin, add_res, add_carry);

    // AND lógico
    wire [7:0] and_res = A & B;

    // Multiplexor para elegir operación
    assign RESULT = (SEL == 2'b00) ? add_res :   // suma
                    (SEL == 2'b01) ? add_res :   // resta
                    (SEL == 2'b10) ? and_res :   // AND
                    8'b00000000;                 // reservado

    // Carry solo en suma/resta
    wire C_flag = (SEL[0] == 1'b0 && SEL[1] == 1'b0) ? add_carry :  // suma
                  (SEL == 2'b01) ? add_carry : 1'b0;                // resta o AND

    // FLAGS = {Z, N, C, P}
    assign FLAGS[3] = (RESULT == 8'b0);  // Z
    assign FLAGS[2] = RESULT[7];         // N
    assign FLAGS[1] = C_flag;            // C
    assign FLAGS[0] = ~(^RESULT);        // P (1 si par)
endmodule
