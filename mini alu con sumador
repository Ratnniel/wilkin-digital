// ---------------------------
// Sumador completo (1 bit)
// ---------------------------
module full_adder(
    input A, B, Cin,
    output S, Cout
);
    wire w1, w2, w3;

    xor (w1, A, B);
    xor (S, w1, Cin);
    and (w2, A, B);
    and (w3, w1, Cin);
    or  (Cout, w2, w3);
endmodule

// ---------------------------
// Sumador de 8 bits
// ---------------------------
module adder8(
    input [7:0] A, B,
    output [7:0] SUM,
    output Cout
);
    wire [6:0] carry;
    
    full_adder FA0(A[0], B[0], 1'b0, SUM[0], carry[0]);
    full_adder FA1(A[1], B[1], carry[0], SUM[1], carry[1]);
    full_adder FA2(A[2], B[2], carry[1], SUM[2], carry[2]);
    full_adder FA3(A[3], B[3], carry[2], SUM[3], carry[3]);
    full_adder FA4(A[4], B[4], carry[3], SUM[4], carry[4]);
    full_adder FA5(A[5], B[5], carry[4], SUM[5], carry[5]);
    full_adder FA6(A[6], B[6], carry[5], SUM[6], carry[6]);
    full_adder FA7(A[7], B[7], carry[6], SUM[7], Cout);
endmodule

// ---------------------------
// ALU parcial (solo suma 8+8)
// con banderas Z, N, C, P
// ---------------------------
module ALU_8bit(
    input  [7:0] A, B,
    output [7:0] RESULT,   // se muestra en los 8 LEDs
    output [3:0] FLAGS     // {Z, N, C, P}
);
    wire carry;
    wire [7:0] sum;
    
    adder8 SUMADOR(A, B, sum, carry);
    assign RESULT = sum;

    // Flags
    assign FLAGS[3] = (sum == 8'b0);     // Z: resultado == 0
    assign FLAGS[2] = sum[7];            // N: bit de signo
    assign FLAGS[1] = carry;             // C: carry-out
    assign FLAGS[0] = ~(^sum);           // P: paridad par (XOR-reduction â†’ 0 si par, 1 si impar, se invierte)

endmodule
